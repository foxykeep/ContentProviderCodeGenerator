
	/**
	 * Created in version %15$d
	 */
    public static final class %1$s extends %2$sContent {

    	private static final String LOG_TAG = %1$s.class.getSimpleName();

        public static final String TABLE_NAME = "%3$s";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/%4$s-%5$s";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/%4$s-%5$s";

        public static final Uri CONTENT_URI = Uri.parse(%2$sContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
        	%6$s;

            private final String mName;
            private final String mType;

            private Columns(final String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                %7$s
        };

        public static void createTable(final SQLiteDatabase db) {
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + %8$s%9$s + ");");

%10$s        }

		// Version %15$d : Creation of the table
%16$s        public static void upgradeTable(final SQLiteDatabase db, int oldVersion, final int newVersion) {

            if (oldVersion < newVersion) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }
%17$s

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version " + newVersion);
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ")%11$s.append(" ) VALUES (%12$s)").toString();
        }

        static void bindValuesInBulkInsert(final SQLiteStatement stmt, final ContentValues values) {
            int i = 1;
%13$s%14$s        }
    }
